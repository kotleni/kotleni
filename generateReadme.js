const crypto = require('node:crypto');
const { URL, URLSearchParams } = require('node:url');

const scriptGithubUrl = 'https://github.com/kotleni/kotleni/blob/master/generateReadme.js';

const config = {
  githubUsername: 'kotleni',

  contact: {
    email: 'yavarenikya@gmail.com',
    linkedin: 'kotleni',
    telegram: 'kotleni',
  },

  statsCard: {
    show_icons: false,
    hide_border: true,
    hide_title: true,
  },

  topLangsCard: {
    hide_border: true,
    layout: 'compact',
  },

  committersBadge: {
    country: 'ukraine',
  }
};

/**
 * Creates block with picture for light and dark themes.
 */
function generatePicture(baseUrl, lightParams, imgAttributes = '') {
  const darkParams = { ...lightParams, theme: 'dark' };

  const lightUrl = new URL(baseUrl);
  lightUrl.search = new URLSearchParams(lightParams);

  const darkUrl = new URL(baseUrl);
  darkUrl.search = new URLSearchParams(darkParams);

  return `<picture>
  <source
    srcset="${darkUrl.toString()}"
    media="(prefers-color-scheme: dark)"
  />
  <source
    srcset="${lightUrl.toString()}"
    media="(prefers-color-scheme: light), (prefers-color-scheme: no-preference)"
  />
  <img ${imgAttributes} src="${lightUrl.toString()}" />
</picture>`;
}


/**
 * Creates the GitHub Stats card markdown.
 */
function generateStatsImage({ githubUsername, statsCard }, cacheBuster) {
  const baseUrl = 'https://github-readme-stats.vercel.app/api';
  const params = { username: githubUsername, ...statsCard, cached: cacheBuster };
  return generatePicture(baseUrl, params, 'align="center"');
}

/**
 * Creates the Top Languages card markdown.
 */
function generateTopLangsImage({ githubUsername, topLangsCard }, cacheBuster) {
  const baseUrl = 'https://github-readme-stats.vercel.app/api/top-langs/';
  const params = { username: githubUsername, ...topLangsCard, cached: cacheBuster };
  return generatePicture(baseUrl, params, 'align="center"');
}

/**
 * Creates the Committers.top badge markdown.
 */
function generateCommittersBadge({ githubUsername, committersBadge }, cacheBuster) {
  const { country } = committersBadge;
  const imageUrl = new URL(`https://user-badge.committers.top/${country}/${githubUsername}.svg`);
  imageUrl.searchParams.set('cached', cacheBuster);

  const linkUrl = `https://committers.top/${country}#${githubUsername}`;
  return `<a href="${linkUrl}">
  <img src="${imageUrl.toString()}" />
</a>`;
}

/**
 * Creates the "Contact me" section markdown.
 */
function generateContactInfo({ contact }) {
  if (!contact) return '';

  const { email, linkedin, telegram } = contact;
  const items = [
    email && `- ðŸ“« **Email**: [${email}](mailto:${email})`,
    linkedin && `- ðŸ§­ **LinkedIn**: [linkedin.com/in/${linkedin}](https://www.linkedin.com/in/${linkedin}/)`,
    telegram && `- ðŸ’¬ **Telegram**: [@${telegram}](https://t.me/${telegram})`,
  ].filter(Boolean); // Removes any empty entries if a contact method isn't provided

  if (items.length === 0) return '';

  return `### Contact me\n${items.join('\n')}`;
}

function generateReadme(userConfig) {
  const cacheBuster = crypto.randomUUID();

  // Assemble the parts.
  const sections = [
    generateStatsImage(userConfig, cacheBuster),
    generateTopLangsImage(userConfig, cacheBuster),
    '<br>',
    generateCommittersBadge(userConfig, cacheBuster),
    generateContactInfo(userConfig),
  ];

  return sections.join('\n\n');
}

const readmeContent = generateReadme(config);
console.log(`<!-- This readme generated by ${scriptGithubUrl} -->`);
console.log(readmeContent);